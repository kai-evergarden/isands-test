package com.test.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.test.model.RegisterOfDistricts;
import com.test.model.RegisterOfDistrictsModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the RegisterOfDistricts service. Represents a row in the &quot;Test_RegisterOfDistricts&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.test.model.RegisterOfDistrictsModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link RegisterOfDistrictsImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see RegisterOfDistrictsImpl
 * @see com.test.model.RegisterOfDistricts
 * @see com.test.model.RegisterOfDistrictsModel
 * @generated
 */
public class RegisterOfDistrictsModelImpl extends BaseModelImpl<RegisterOfDistricts>
    implements RegisterOfDistrictsModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a register of districts model instance should use the {@link com.test.model.RegisterOfDistricts} interface instead.
     */
    public static final String TABLE_NAME = "Test_RegisterOfDistricts";
    public static final Object[][] TABLE_COLUMNS = {
            { "registerOfDistrictsId", Types.BIGINT },
            { "name", Types.VARCHAR },
            { "districtCode", Types.BIGINT },
            { "isArchived", Types.BOOLEAN }
        };
    public static final String TABLE_SQL_CREATE = "create table Test_RegisterOfDistricts (registerOfDistrictsId LONG not null primary key,name VARCHAR(75) null,districtCode LONG,isArchived BOOLEAN)";
    public static final String TABLE_SQL_DROP = "drop table Test_RegisterOfDistricts";
    public static final String ORDER_BY_JPQL = " ORDER BY registerOfDistricts.registerOfDistrictsId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY Test_RegisterOfDistricts.registerOfDistrictsId ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.test.model.RegisterOfDistricts"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.test.model.RegisterOfDistricts"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.test.model.RegisterOfDistricts"),
            true);
    public static long ISARCHIVED_COLUMN_BITMASK = 1L;
    public static long NAME_COLUMN_BITMASK = 2L;
    public static long REGISTEROFDISTRICTSID_COLUMN_BITMASK = 4L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.test.model.RegisterOfDistricts"));
    private static ClassLoader _classLoader = RegisterOfDistricts.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            RegisterOfDistricts.class
        };
    private long _registerOfDistrictsId;
    private String _name;
    private String _originalName;
    private long _districtCode;
    private boolean _isArchived;
    private boolean _originalIsArchived;
    private boolean _setOriginalIsArchived;
    private long _columnBitmask;
    private RegisterOfDistricts _escapedModel;

    public RegisterOfDistrictsModelImpl() {
    }

    @Override
    public long getPrimaryKey() {
        return _registerOfDistrictsId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setRegisterOfDistrictsId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _registerOfDistrictsId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return RegisterOfDistricts.class;
    }

    @Override
    public String getModelClassName() {
        return RegisterOfDistricts.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("registerOfDistrictsId", getRegisterOfDistrictsId());
        attributes.put("name", getName());
        attributes.put("districtCode", getDistrictCode());
        attributes.put("isArchived", getIsArchived());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long registerOfDistrictsId = (Long) attributes.get(
                "registerOfDistrictsId");

        if (registerOfDistrictsId != null) {
            setRegisterOfDistrictsId(registerOfDistrictsId);
        }

        String name = (String) attributes.get("name");

        if (name != null) {
            setName(name);
        }

        Long districtCode = (Long) attributes.get("districtCode");

        if (districtCode != null) {
            setDistrictCode(districtCode);
        }

        Boolean isArchived = (Boolean) attributes.get("isArchived");

        if (isArchived != null) {
            setIsArchived(isArchived);
        }
    }

    @Override
    public long getRegisterOfDistrictsId() {
        return _registerOfDistrictsId;
    }

    @Override
    public void setRegisterOfDistrictsId(long registerOfDistrictsId) {
        _registerOfDistrictsId = registerOfDistrictsId;
    }

    @Override
    public String getName() {
        if (_name == null) {
            return StringPool.BLANK;
        } else {
            return _name;
        }
    }

    @Override
    public void setName(String name) {
        _columnBitmask |= NAME_COLUMN_BITMASK;

        if (_originalName == null) {
            _originalName = _name;
        }

        _name = name;
    }

    public String getOriginalName() {
        return GetterUtil.getString(_originalName);
    }

    @Override
    public long getDistrictCode() {
        return _districtCode;
    }

    @Override
    public void setDistrictCode(long districtCode) {
        _districtCode = districtCode;
    }

    @Override
    public boolean getIsArchived() {
        return _isArchived;
    }

    @Override
    public boolean isIsArchived() {
        return _isArchived;
    }

    @Override
    public void setIsArchived(boolean isArchived) {
        _columnBitmask |= ISARCHIVED_COLUMN_BITMASK;

        if (!_setOriginalIsArchived) {
            _setOriginalIsArchived = true;

            _originalIsArchived = _isArchived;
        }

        _isArchived = isArchived;
    }

    public boolean getOriginalIsArchived() {
        return _originalIsArchived;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            RegisterOfDistricts.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public RegisterOfDistricts toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (RegisterOfDistricts) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        RegisterOfDistrictsImpl registerOfDistrictsImpl = new RegisterOfDistrictsImpl();

        registerOfDistrictsImpl.setRegisterOfDistrictsId(getRegisterOfDistrictsId());
        registerOfDistrictsImpl.setName(getName());
        registerOfDistrictsImpl.setDistrictCode(getDistrictCode());
        registerOfDistrictsImpl.setIsArchived(getIsArchived());

        registerOfDistrictsImpl.resetOriginalValues();

        return registerOfDistrictsImpl;
    }

    @Override
    public int compareTo(RegisterOfDistricts registerOfDistricts) {
        long primaryKey = registerOfDistricts.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof RegisterOfDistricts)) {
            return false;
        }

        RegisterOfDistricts registerOfDistricts = (RegisterOfDistricts) obj;

        long primaryKey = registerOfDistricts.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        RegisterOfDistrictsModelImpl registerOfDistrictsModelImpl = this;

        registerOfDistrictsModelImpl._originalName = registerOfDistrictsModelImpl._name;

        registerOfDistrictsModelImpl._originalIsArchived = registerOfDistrictsModelImpl._isArchived;

        registerOfDistrictsModelImpl._setOriginalIsArchived = false;

        registerOfDistrictsModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<RegisterOfDistricts> toCacheModel() {
        RegisterOfDistrictsCacheModel registerOfDistrictsCacheModel = new RegisterOfDistrictsCacheModel();

        registerOfDistrictsCacheModel.registerOfDistrictsId = getRegisterOfDistrictsId();

        registerOfDistrictsCacheModel.name = getName();

        String name = registerOfDistrictsCacheModel.name;

        if ((name != null) && (name.length() == 0)) {
            registerOfDistrictsCacheModel.name = null;
        }

        registerOfDistrictsCacheModel.districtCode = getDistrictCode();

        registerOfDistrictsCacheModel.isArchived = getIsArchived();

        return registerOfDistrictsCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(9);

        sb.append("{registerOfDistrictsId=");
        sb.append(getRegisterOfDistrictsId());
        sb.append(", name=");
        sb.append(getName());
        sb.append(", districtCode=");
        sb.append(getDistrictCode());
        sb.append(", isArchived=");
        sb.append(getIsArchived());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(16);

        sb.append("<model><model-name>");
        sb.append("com.test.model.RegisterOfDistricts");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>registerOfDistrictsId</column-name><column-value><![CDATA[");
        sb.append(getRegisterOfDistrictsId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>name</column-name><column-value><![CDATA[");
        sb.append(getName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>districtCode</column-name><column-value><![CDATA[");
        sb.append(getDistrictCode());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>isArchived</column-name><column-value><![CDATA[");
        sb.append(getIsArchived());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
