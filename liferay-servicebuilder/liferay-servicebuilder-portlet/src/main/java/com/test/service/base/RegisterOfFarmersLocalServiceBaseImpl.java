package com.test.service.base;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import com.test.model.RegisterOfFarmers;

import com.test.service.RegisterOfFarmersLocalService;
import com.test.service.persistence.RegisterOfDistrictsPersistence;
import com.test.service.persistence.RegisterOfFarmersPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the register of farmers local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.test.service.impl.RegisterOfFarmersLocalServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see com.test.service.impl.RegisterOfFarmersLocalServiceImpl
 * @see com.test.service.RegisterOfFarmersLocalServiceUtil
 * @generated
 */
public abstract class RegisterOfFarmersLocalServiceBaseImpl
    extends BaseLocalServiceImpl implements RegisterOfFarmersLocalService,
        IdentifiableBean {
    @BeanReference(type = com.test.service.RegisterOfDistrictsLocalService.class)
    protected com.test.service.RegisterOfDistrictsLocalService registerOfDistrictsLocalService;
    @BeanReference(type = RegisterOfDistrictsPersistence.class)
    protected RegisterOfDistrictsPersistence registerOfDistrictsPersistence;
    @BeanReference(type = com.test.service.RegisterOfFarmersLocalService.class)
    protected com.test.service.RegisterOfFarmersLocalService registerOfFarmersLocalService;
    @BeanReference(type = RegisterOfFarmersPersistence.class)
    protected RegisterOfFarmersPersistence registerOfFarmersPersistence;
    @BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
    protected com.liferay.counter.service.CounterLocalService counterLocalService;
    @BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
    protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
    @BeanReference(type = com.liferay.portal.service.UserLocalService.class)
    protected com.liferay.portal.service.UserLocalService userLocalService;
    @BeanReference(type = com.liferay.portal.service.UserService.class)
    protected com.liferay.portal.service.UserService userService;
    @BeanReference(type = UserPersistence.class)
    protected UserPersistence userPersistence;
    private String _beanIdentifier;
    private ClassLoader _classLoader;
    private RegisterOfFarmersLocalServiceClpInvoker _clpInvoker = new RegisterOfFarmersLocalServiceClpInvoker();

    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. Always use {@link com.test.service.RegisterOfFarmersLocalServiceUtil} to access the register of farmers local service.
     */

    /**
     * Adds the register of farmers to the database. Also notifies the appropriate model listeners.
     *
     * @param registerOfFarmers the register of farmers
     * @return the register of farmers that was added
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.REINDEX)
    @Override
    public RegisterOfFarmers addRegisterOfFarmers(
        RegisterOfFarmers registerOfFarmers) throws SystemException {
        registerOfFarmers.setNew(true);

        return registerOfFarmersPersistence.update(registerOfFarmers);
    }

    /**
     * Creates a new register of farmers with the primary key. Does not add the register of farmers to the database.
     *
     * @param registerOfFarmersId the primary key for the new register of farmers
     * @return the new register of farmers
     */
    @Override
    public RegisterOfFarmers createRegisterOfFarmers(long registerOfFarmersId) {
        return registerOfFarmersPersistence.create(registerOfFarmersId);
    }

    /**
     * Deletes the register of farmers with the primary key from the database. Also notifies the appropriate model listeners.
     *
     * @param registerOfFarmersId the primary key of the register of farmers
     * @return the register of farmers that was removed
     * @throws PortalException if a register of farmers with the primary key could not be found
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.DELETE)
    @Override
    public RegisterOfFarmers deleteRegisterOfFarmers(long registerOfFarmersId)
        throws PortalException, SystemException {
        return registerOfFarmersPersistence.remove(registerOfFarmersId);
    }

    /**
     * Deletes the register of farmers from the database. Also notifies the appropriate model listeners.
     *
     * @param registerOfFarmers the register of farmers
     * @return the register of farmers that was removed
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.DELETE)
    @Override
    public RegisterOfFarmers deleteRegisterOfFarmers(
        RegisterOfFarmers registerOfFarmers) throws SystemException {
        return registerOfFarmersPersistence.remove(registerOfFarmers);
    }

    @Override
    public DynamicQuery dynamicQuery() {
        Class<?> clazz = getClass();

        return DynamicQueryFactoryUtil.forClass(RegisterOfFarmers.class,
            clazz.getClassLoader());
    }

    /**
     * Performs a dynamic query on the database and returns the matching rows.
     *
     * @param dynamicQuery the dynamic query
     * @return the matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery)
        throws SystemException {
        return registerOfFarmersPersistence.findWithDynamicQuery(dynamicQuery);
    }

    /**
     * Performs a dynamic query on the database and returns a range of the matching rows.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.test.model.impl.RegisterOfFarmersModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param dynamicQuery the dynamic query
     * @param start the lower bound of the range of model instances
     * @param end the upper bound of the range of model instances (not inclusive)
     * @return the range of matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
        throws SystemException {
        return registerOfFarmersPersistence.findWithDynamicQuery(dynamicQuery,
            start, end);
    }

    /**
     * Performs a dynamic query on the database and returns an ordered range of the matching rows.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.test.model.impl.RegisterOfFarmersModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param dynamicQuery the dynamic query
     * @param start the lower bound of the range of model instances
     * @param end the upper bound of the range of model instances (not inclusive)
     * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
     * @return the ordered range of matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
        OrderByComparator orderByComparator) throws SystemException {
        return registerOfFarmersPersistence.findWithDynamicQuery(dynamicQuery,
            start, end, orderByComparator);
    }

    /**
     * Returns the number of rows that match the dynamic query.
     *
     * @param dynamicQuery the dynamic query
     * @return the number of rows that match the dynamic query
     * @throws SystemException if a system exception occurred
     */
    @Override
    public long dynamicQueryCount(DynamicQuery dynamicQuery)
        throws SystemException {
        return registerOfFarmersPersistence.countWithDynamicQuery(dynamicQuery);
    }

    /**
     * Returns the number of rows that match the dynamic query.
     *
     * @param dynamicQuery the dynamic query
     * @param projection the projection to apply to the query
     * @return the number of rows that match the dynamic query
     * @throws SystemException if a system exception occurred
     */
    @Override
    public long dynamicQueryCount(DynamicQuery dynamicQuery,
        Projection projection) throws SystemException {
        return registerOfFarmersPersistence.countWithDynamicQuery(dynamicQuery,
            projection);
    }

    @Override
    public RegisterOfFarmers fetchRegisterOfFarmers(long registerOfFarmersId)
        throws SystemException {
        return registerOfFarmersPersistence.fetchByPrimaryKey(registerOfFarmersId);
    }

    /**
     * Returns the register of farmers with the primary key.
     *
     * @param registerOfFarmersId the primary key of the register of farmers
     * @return the register of farmers
     * @throws PortalException if a register of farmers with the primary key could not be found
     * @throws SystemException if a system exception occurred
     */
    @Override
    public RegisterOfFarmers getRegisterOfFarmers(long registerOfFarmersId)
        throws PortalException, SystemException {
        return registerOfFarmersPersistence.findByPrimaryKey(registerOfFarmersId);
    }

    @Override
    public PersistedModel getPersistedModel(Serializable primaryKeyObj)
        throws PortalException, SystemException {
        return registerOfFarmersPersistence.findByPrimaryKey(primaryKeyObj);
    }

    /**
     * Returns a range of all the register of farmerses.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.test.model.impl.RegisterOfFarmersModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param start the lower bound of the range of register of farmerses
     * @param end the upper bound of the range of register of farmerses (not inclusive)
     * @return the range of register of farmerses
     * @throws SystemException if a system exception occurred
     */
    @Override
    public List<RegisterOfFarmers> getRegisterOfFarmerses(int start, int end)
        throws SystemException {
        return registerOfFarmersPersistence.findAll(start, end);
    }

    /**
     * Returns the number of register of farmerses.
     *
     * @return the number of register of farmerses
     * @throws SystemException if a system exception occurred
     */
    @Override
    public int getRegisterOfFarmersesCount() throws SystemException {
        return registerOfFarmersPersistence.countAll();
    }

    /**
     * Updates the register of farmers in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
     *
     * @param registerOfFarmers the register of farmers
     * @return the register of farmers that was updated
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.REINDEX)
    @Override
    public RegisterOfFarmers updateRegisterOfFarmers(
        RegisterOfFarmers registerOfFarmers) throws SystemException {
        return registerOfFarmersPersistence.update(registerOfFarmers);
    }

    /**
     * Returns the register of districts local service.
     *
     * @return the register of districts local service
     */
    public com.test.service.RegisterOfDistrictsLocalService getRegisterOfDistrictsLocalService() {
        return registerOfDistrictsLocalService;
    }

    /**
     * Sets the register of districts local service.
     *
     * @param registerOfDistrictsLocalService the register of districts local service
     */
    public void setRegisterOfDistrictsLocalService(
        com.test.service.RegisterOfDistrictsLocalService registerOfDistrictsLocalService) {
        this.registerOfDistrictsLocalService = registerOfDistrictsLocalService;
    }

    /**
     * Returns the register of districts persistence.
     *
     * @return the register of districts persistence
     */
    public RegisterOfDistrictsPersistence getRegisterOfDistrictsPersistence() {
        return registerOfDistrictsPersistence;
    }

    /**
     * Sets the register of districts persistence.
     *
     * @param registerOfDistrictsPersistence the register of districts persistence
     */
    public void setRegisterOfDistrictsPersistence(
        RegisterOfDistrictsPersistence registerOfDistrictsPersistence) {
        this.registerOfDistrictsPersistence = registerOfDistrictsPersistence;
    }

    /**
     * Returns the register of farmers local service.
     *
     * @return the register of farmers local service
     */
    public com.test.service.RegisterOfFarmersLocalService getRegisterOfFarmersLocalService() {
        return registerOfFarmersLocalService;
    }

    /**
     * Sets the register of farmers local service.
     *
     * @param registerOfFarmersLocalService the register of farmers local service
     */
    public void setRegisterOfFarmersLocalService(
        com.test.service.RegisterOfFarmersLocalService registerOfFarmersLocalService) {
        this.registerOfFarmersLocalService = registerOfFarmersLocalService;
    }

    /**
     * Returns the register of farmers persistence.
     *
     * @return the register of farmers persistence
     */
    public RegisterOfFarmersPersistence getRegisterOfFarmersPersistence() {
        return registerOfFarmersPersistence;
    }

    /**
     * Sets the register of farmers persistence.
     *
     * @param registerOfFarmersPersistence the register of farmers persistence
     */
    public void setRegisterOfFarmersPersistence(
        RegisterOfFarmersPersistence registerOfFarmersPersistence) {
        this.registerOfFarmersPersistence = registerOfFarmersPersistence;
    }

    /**
     * Returns the counter local service.
     *
     * @return the counter local service
     */
    public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
        return counterLocalService;
    }

    /**
     * Sets the counter local service.
     *
     * @param counterLocalService the counter local service
     */
    public void setCounterLocalService(
        com.liferay.counter.service.CounterLocalService counterLocalService) {
        this.counterLocalService = counterLocalService;
    }

    /**
     * Returns the resource local service.
     *
     * @return the resource local service
     */
    public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
        return resourceLocalService;
    }

    /**
     * Sets the resource local service.
     *
     * @param resourceLocalService the resource local service
     */
    public void setResourceLocalService(
        com.liferay.portal.service.ResourceLocalService resourceLocalService) {
        this.resourceLocalService = resourceLocalService;
    }

    /**
     * Returns the user local service.
     *
     * @return the user local service
     */
    public com.liferay.portal.service.UserLocalService getUserLocalService() {
        return userLocalService;
    }

    /**
     * Sets the user local service.
     *
     * @param userLocalService the user local service
     */
    public void setUserLocalService(
        com.liferay.portal.service.UserLocalService userLocalService) {
        this.userLocalService = userLocalService;
    }

    /**
     * Returns the user remote service.
     *
     * @return the user remote service
     */
    public com.liferay.portal.service.UserService getUserService() {
        return userService;
    }

    /**
     * Sets the user remote service.
     *
     * @param userService the user remote service
     */
    public void setUserService(
        com.liferay.portal.service.UserService userService) {
        this.userService = userService;
    }

    /**
     * Returns the user persistence.
     *
     * @return the user persistence
     */
    public UserPersistence getUserPersistence() {
        return userPersistence;
    }

    /**
     * Sets the user persistence.
     *
     * @param userPersistence the user persistence
     */
    public void setUserPersistence(UserPersistence userPersistence) {
        this.userPersistence = userPersistence;
    }

    public void afterPropertiesSet() {
        Class<?> clazz = getClass();

        _classLoader = clazz.getClassLoader();

        PersistedModelLocalServiceRegistryUtil.register("com.test.model.RegisterOfFarmers",
            registerOfFarmersLocalService);
    }

    public void destroy() {
        PersistedModelLocalServiceRegistryUtil.unregister(
            "com.test.model.RegisterOfFarmers");
    }

    /**
     * Returns the Spring bean ID for this bean.
     *
     * @return the Spring bean ID for this bean
     */
    @Override
    public String getBeanIdentifier() {
        return _beanIdentifier;
    }

    /**
     * Sets the Spring bean ID for this bean.
     *
     * @param beanIdentifier the Spring bean ID for this bean
     */
    @Override
    public void setBeanIdentifier(String beanIdentifier) {
        _beanIdentifier = beanIdentifier;
    }

    @Override
    public Object invokeMethod(String name, String[] parameterTypes,
        Object[] arguments) throws Throwable {
        Thread currentThread = Thread.currentThread();

        ClassLoader contextClassLoader = currentThread.getContextClassLoader();

        if (contextClassLoader != _classLoader) {
            currentThread.setContextClassLoader(_classLoader);
        }

        try {
            return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
        } finally {
            if (contextClassLoader != _classLoader) {
                currentThread.setContextClassLoader(contextClassLoader);
            }
        }
    }

    protected Class<?> getModelClass() {
        return RegisterOfFarmers.class;
    }

    protected String getModelClassName() {
        return RegisterOfFarmers.class.getName();
    }

    /**
     * Performs an SQL query.
     *
     * @param sql the sql query
     */
    protected void runSQL(String sql) throws SystemException {
        try {
            DataSource dataSource = registerOfFarmersPersistence.getDataSource();

            SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
                    sql, new int[0]);

            sqlUpdate.update();
        } catch (Exception e) {
            throw new SystemException(e);
        }
    }
}
